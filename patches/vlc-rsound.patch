diff --git a/configure.ac b/configure.ac
index f077c7b..492eb45 100644
--- a/configure.ac
+++ b/configure.ac
@@ -3645,6 +3645,27 @@ AS_IF([test "${enable_alsa}" != "no"], [
 AM_CONDITIONAL([HAVE_ALSA], [test "${have_alsa}" = "yes"])
 
 dnl
+dnl  RSound module
+AC_ARG_ENABLE(rsound,
+  [  --enable-rsound         RSound (default auto)])
+have_rsound="no"
+AS_IF([test "${enable_rsound}" != "no"], [
+  PKG_CHECK_MODULES([RSOUND], [rsound >= 0.9], [
+    have_rsound="yes"
+  ], [
+    AS_IF([test "x${enable_rsound}" != "x"], [
+      AC_MSG_ERROR([rsound not found])
+    ])
+  ])
+])
+AM_CONDITIONAL([HAVE_RSOUND], [test "${have_rsound}" = "yes"])
+AS_IF([test "${have_rsound}" = "yes"], [
+       VLC_ADD_PLUGIN(rsound)
+       VLC_ADD_LIBS([rsound], [-lrsound])
+], [])
+
+
+dnl
 dnl  win32 waveOut plugin
 dnl
 AC_ARG_ENABLE(waveout,
diff --git a/modules/audio_output/Modules.am b/modules/audio_output/Modules.am
index f9df5bd..2da1699 100644
--- a/modules/audio_output/Modules.am
+++ b/modules/audio_output/Modules.am
@@ -8,6 +8,7 @@ SOURCES_portaudio = portaudio.c
 SOURCES_auhal = auhal.c
 SOURCES_jack = jack.c
 SOURCES_pulse = pulse.c
+SOURCES_rsound = rsound.c
 
 libvlc_LTLIBRARIES += libaout_file_plugin.la
 
diff --git a/modules/audio_output/rsound.c b/modules/audio_output/rsound.c
new file mode 100644
index 0000000..6b8e3c7
--- /dev/null
+++ b/modules/audio_output/rsound.c
@@ -0,0 +1,289 @@
+/*****************************************************************************
+ * rsound.c : RSound module for vlc
+ *****************************************************************************
+ * Copyright (C) 2010 the VideoLAN team
+ *
+ * Authors: Hans-Kristian Arntzen <maister@archlinux.us>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston MA 02110-1301, USA.
+ *****************************************************************************/
+
+/*****************************************************************************
+ * Preamble
+ *****************************************************************************/
+
+#ifdef HAVE_CONFIG_H
+# include "config.h"
+#endif
+
+//#include <stdio.h>
+#include <rsound.h>
+
+#include <vlc_common.h>
+#include <vlc_plugin.h>
+#include <vlc_fs.h>
+
+#include <vlc_aout.h>
+
+/*****************************************************************************
+ * aout_sys_t: RSound audio output method descriptor
+ *****************************************************************************
+ * This structure is part of the audio output thread descriptor.
+ *****************************************************************************/
+struct aout_sys_t
+{
+    rsound_t *rd;
+};
+
+/*****************************************************************************
+ * Local prototypes
+ *****************************************************************************/
+static int  Open         ( vlc_object_t * );
+static void Close        ( vlc_object_t * );
+
+static void Play         ( aout_instance_t * );
+static void* RSDThread   ( vlc_object_t * );
+
+static mtime_t BufferDuration( aout_instance_t * p_aout );
+
+#define CONNECT_STRING_OPTION_HOST "rsd-connect-host"
+#define CONNECT_STRING_HOST N_("RSound server host:")
+#define CONNECT_STRING_LONGTEXT_HOST N_("Defines which host to connect to. A blank field equals the default (RSD_SERVER environmental variable or 'localhost').")
+
+#define CONNECT_STRING_OPTION_PORT "rsd-connect-port"
+#define CONNECT_STRING_PORT N_("RSound server port:")
+#define CONNECT_STRING_LONGTEXT_PORT N_("Defines which port to connect to. A blank field equals the default (RSD_PORT environmental variable or '12345').")
+
+/*****************************************************************************
+ * Module descriptor
+ *****************************************************************************/
+
+vlc_module_begin ()
+    set_shortname( "RSound" )
+    set_description( N_("RSound audio output") )
+
+    set_category( CAT_AUDIO )
+    set_subcategory( SUBCAT_AUDIO_AOUT )
+
+    add_string(CONNECT_STRING_OPTION_HOST, NULL, NULL, CONNECT_STRING_HOST,
+          CONNECT_STRING_LONGTEXT_HOST, true)
+    add_string(CONNECT_STRING_OPTION_PORT, NULL, NULL, CONNECT_STRING_PORT,
+          CONNECT_STRING_LONGTEXT_PORT, true)
+
+    set_capability( "audio output", 160 )
+    set_callbacks( Open, Close )
+vlc_module_end ()
+
+
+/*****************************************************************************
+ * Open: open the connection
+ *****************************************************************************/
+static int Open( vlc_object_t *p_this )
+{
+    aout_instance_t * p_aout = (aout_instance_t *)p_this;
+    struct aout_sys_t * p_sys;
+
+    /* Allocate structure */
+    p_aout->output.p_sys = p_sys = malloc( sizeof( aout_sys_t ) );
+    if( p_sys == NULL )
+        return VLC_ENOMEM;
+
+    /* Inits rsound_t */
+    if ( rsd_init(&p_sys->rd) < 0 )
+        return VLC_ENOMEM;
+
+    int format = RSD_S16_NE;
+    int channels = aout_FormatNbChannels( &p_aout->output.output );
+    int rate = p_aout->output.output.i_rate;
+
+    char *host = var_InheritString ( p_aout, CONNECT_STRING_OPTION_HOST );
+    if ( host != NULL && strlen(host) > 0 )
+        rsd_set_param(p_sys->rd, RSD_HOST, host);
+    if ( host != NULL )
+       free(host);
+
+    char *port = var_InheritString ( p_aout, CONNECT_STRING_OPTION_PORT );
+    if ( port != NULL && strlen(port) > 0 )
+        rsd_set_param(p_sys->rd, RSD_PORT, port);
+    if ( port != NULL )
+       free(port);
+
+    /* Sets up channel mapping */
+    switch(channels)
+    {
+        case 8:
+            p_aout->output.output.i_physical_channels
+                = AOUT_CHAN_LEFT | AOUT_CHAN_RIGHT | AOUT_CHAN_CENTER
+                | AOUT_CHAN_MIDDLELEFT | AOUT_CHAN_MIDDLERIGHT
+                | AOUT_CHAN_REARLEFT | AOUT_CHAN_REARRIGHT
+                | AOUT_CHAN_LFE;
+            break;
+        case 6:
+            p_aout->output.output.i_physical_channels
+                = AOUT_CHAN_LEFT | AOUT_CHAN_RIGHT | AOUT_CHAN_CENTER
+                | AOUT_CHAN_REARLEFT | AOUT_CHAN_REARRIGHT
+                | AOUT_CHAN_LFE;
+            break;
+
+        case 4:
+            p_aout->output.output.i_physical_channels
+                = AOUT_CHAN_LEFT | AOUT_CHAN_RIGHT
+                | AOUT_CHAN_REARLEFT | AOUT_CHAN_REARRIGHT;
+            break;
+
+        case 2:
+            p_aout->output.output.i_physical_channels
+                = AOUT_CHAN_LEFT | AOUT_CHAN_RIGHT;
+            break;
+
+        case 1:
+            p_aout->output.output.i_physical_channels = AOUT_CHAN_CENTER;
+            break;
+
+        default:
+            msg_Err(p_aout,"Invalid number of channels");
+            rsd_free(p_sys->rd);
+            free(p_sys);
+            return VLC_EGENERIC;
+    }
+
+    rsd_set_param(p_sys->rd, RSD_SAMPLERATE, &rate);
+    rsd_set_param(p_sys->rd, RSD_CHANNELS, &channels);
+    rsd_set_param(p_sys->rd, RSD_FORMAT, &format);
+
+    p_aout->output.output.i_format = VLC_CODEC_S16N;
+    p_aout->output.i_nb_samples = 1024; // Just pick something relatively small. Anything is fine.
+    p_aout->output.pf_play = Play;
+
+    aout_VolumeSoftInit( p_aout );
+
+    if ( rsd_start(p_sys->rd) < 0 )
+    {
+       msg_Err ( p_aout, "Cannot connect to server.");
+       rsd_free( p_sys->rd );
+       free( p_sys );
+       return VLC_EGENERIC;
+    }
+
+    /* Create RSound thread and wait for its readiness. */
+    if( vlc_thread_create( p_aout, "aout", RSDThread,
+                           VLC_THREAD_PRIORITY_OUTPUT ) )
+    {
+        msg_Err( p_aout, "cannot create RSound thread (%m)" );
+        rsd_free( p_sys->rd );
+        free( p_sys );
+        return VLC_ENOMEM;
+    }
+
+    return VLC_SUCCESS;
+}
+
+/*****************************************************************************
+ * Play: nothing to do
+ *****************************************************************************/
+static void Play( aout_instance_t *p_aout )
+{
+    VLC_UNUSED(p_aout);
+}
+
+/*****************************************************************************
+ * Close: close the connection
+ *****************************************************************************/
+static void Close( vlc_object_t * p_this )
+{
+    aout_instance_t *p_aout = (aout_instance_t *)p_this;
+    struct aout_sys_t * p_sys = p_aout->output.p_sys;
+
+    vlc_object_kill( p_aout );
+    vlc_thread_join( p_aout );
+    p_aout->b_die = false;
+
+    rsd_stop(p_sys->rd);
+    rsd_free(p_sys->rd);
+
+    free( p_sys );
+}
+
+/*****************************************************************************
+ * BufferDuration: buffer status query
+ *****************************************************************************
+ * This function returns the duration in microseconds of the current buffer.
+ *****************************************************************************/
+static mtime_t BufferDuration( aout_instance_t * p_aout )
+{
+    struct aout_sys_t * p_sys = p_aout->output.p_sys;
+
+    return (mtime_t)(rsd_delay_ms(p_sys->rd) * 1000); 
+}
+
+/*****************************************************************************
+ * Thread loop
+ ****************************************************************************/
+
+#define MIN_LATENCY_US 50000
+
+static void* RSDThread( vlc_object_t *p_this )
+{
+    aout_instance_t * p_aout = (aout_instance_t*)p_this;
+    struct aout_sys_t * p_sys = p_aout->output.p_sys;
+    int canc = vlc_savecancel ();
+
+    // Fill up the client side buffer before we start
+    uint8_t tmpbuf[rsd_get_avail(p_sys->rd)];
+    memset(tmpbuf, 0, sizeof(tmpbuf));
+    rsd_write(p_sys->rd, tmpbuf, sizeof(tmpbuf));
+
+    while ( vlc_object_alive (p_aout) )
+    {
+        aout_buffer_t * p_buffer = NULL;
+        uint8_t * p_bytes;
+        int i_size;
+
+        mtime_t buffered = BufferDuration( p_aout );
+
+        p_buffer = aout_OutputNextBuffer( p_aout, mdate() + buffered, false );
+
+        if ( p_buffer == NULL )
+        {
+           /* We avoid buffer underruns since they make latency handling more inaccurate. We simply fill up the client side buffer. */
+           if ( BufferDuration(p_aout) < MIN_LATENCY_US && rsd_get_avail(p_sys->rd) > 0 )
+           {
+              msg_Dbg(p_aout, "Possible underrun detected, filling up buffer.");
+              uint8_t tmpbuf[rsd_get_avail(p_sys->rd)];
+              memset(tmpbuf, 0, sizeof(tmpbuf));
+              rsd_write(p_sys->rd, tmpbuf, sizeof(tmpbuf));
+           }
+           /* We will need to sleep for some time anyways. */
+           else
+           {
+              msleep(BufferDuration(p_aout)/8);
+           }
+           continue;
+        }
+
+        p_bytes = p_buffer->p_buffer;
+        i_size = p_buffer->i_buffer;
+
+        if ( rsd_write(p_sys->rd, p_bytes, i_size) == 0 )
+        {
+            msg_Err(p_aout, "rsd_write() failed. Connection was closed?");
+        }
+
+        aout_BufferFree(p_buffer);
+    }
+
+    vlc_restorecancel (canc);
+    return NULL;
+}
