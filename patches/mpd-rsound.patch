diff --git a/Makefile.am b/Makefile.am
index 0966a2a..cb2a872 100644
--- a/Makefile.am
+++ b/Makefile.am
@@ -49,6 +49,7 @@ mpd_headers = \
 	src/output_state.h \
 	src/output_print.h \
 	src/output_command.h \
+   src/output/rsound.h \
 	src/filter_internal.h \
 	src/filter_config.h \
 	src/filter_plugin.h \
@@ -654,6 +655,7 @@ OUTPUT_LIBS = \
 	$(LIBWRAP_LDFLAGS) \
 	$(AO_LIBS) \
 	$(ALSA_LIBS) \
+   $(RSOUND_LIBS) \
 	$(FFADO_LIBS) \
 	$(JACK_LIBS) \
 	$(OPENAL_LIBS) \
@@ -670,8 +672,7 @@ OUTPUT_API_SRC = \
 	src/output_command.c \
 	src/output_init.c
 
-OUTPUT_SRC = \
-	src/output/null_plugin.c
+OUTPUT_SRC = src/output/null_plugin.c
 
 MIXER_API_SRC = \
 	src/mixer_control.c \
@@ -687,6 +688,10 @@ OUTPUT_SRC += src/output/alsa_plugin.c
 MIXER_SRC += src/mixer/alsa_mixer_plugin.c
 endif
 
+if HAVE_RSOUND
+OUTPUT_SRC += src/output/rsound_plugin.c
+endif
+
 if ENABLE_FFADO_OUTPUT
 OUTPUT_SRC += src/output/ffado_output_plugin.c
 endif
diff --git a/configure.ac b/configure.ac
index 9422150..5d31b9b 100644
--- a/configure.ac
+++ b/configure.ac
@@ -40,7 +40,6 @@ AC_SUBST(AM_CFLAGS,"")
 
 AC_SUBST(MPD_LIBS)
 AC_SUBST(MPD_CFLAGS)
-MPD_LIBS=""
 MPD_CFLAGS=""
 
 dnl ---------------------------------------------------------------------------
@@ -125,6 +124,11 @@ AC_ARG_ENABLE(ao,
 		[enable support for libao]),,
 	enable_ao=auto)
 
+AC_ARG_ENABLE(rsound,
+   AS_HELP_STRING([--enable-rsound],
+      [enable support for rsound]),,
+   enable_rsound=auto)
+
 AC_ARG_ENABLE(audiofile,
 	AS_HELP_STRING([--enable-audiofile],
 		[enable audiofile support (WAV and others)]),,
@@ -1209,6 +1213,17 @@ fi
 
 AM_CONDITIONAL(HAVE_ALSA, test x$enable_alsa = xyes)
 
+
+dnl ---------------------------------- RSOUND ---------------------------------
+MPD_AUTO_PKG(rsound, RSOUND, [rsound >= 0.9],
+   [RSOUND output plugin], [librsound not found])
+
+if test x$enable_rsound = xyes; then
+   AC_DEFINE(HAVE_RSOUND, 1, [Define to enable RSOUND support])
+fi
+
+AM_CONDITIONAL(HAVE_RSOUND, test x$enable_rsound = xyes)
+
 dnl ----------------------------------- FFADO ---------------------------------
 
 MPD_AUTO_PKG(ffado, FFADO, [libffado],
@@ -1409,6 +1424,7 @@ AM_CONDITIONAL(ENABLE_WINMM_OUTPUT, test x$enable_winmm_output = xyes)
 dnl --------------------- Post Audio Output Plugins Tests ---------------------
 if
 	test x$enable_alsa = xno &&
+   test x$enable_rsound = xno &&
 	test x$enable_ao = xno &&
 	test x$enable_ffado = xno &&
 	test x$enable_fifo = xno &&
@@ -1545,6 +1561,7 @@ results(id3,[ID3])
 
 echo -en '\nPlayback support:\n\t'
 results(alsa,ALSA)
+results(rsound,RSOUND)
 results(ffado,FFADO)
 results(fifo,FIFO)
 results(recorder_output,[File Recorder])
diff --git a/src/output/rsound_plugin.c b/src/output/rsound_plugin.c
new file mode 100644
index 0000000..1a64493
--- /dev/null
+++ b/src/output/rsound_plugin.c
@@ -0,0 +1,146 @@
+/*
+ * Copyright (C) 2003-2010 The Music Player Daemon Project
+ * http://www.musicpd.org
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+ */
+
+#include "config.h"
+#include "output_api.h"
+#include "mixer_list.h"
+#include <rsound.h>
+
+#include <glib.h>
+#include <sys/types.h>
+#include <sys/socket.h>
+#include <arpa/inet.h>
+#include <netdb.h>
+#include <stdint.h>
+#include <fcntl.h>
+#include <unistd.h>
+#include <stdlib.h>
+#include <string.h>
+#include <stdint.h>
+
+
+#undef G_LOG_DOMAIN
+#define G_LOG_DOMAIN "rsound"
+
+
+static const char *default_host = "localhost";
+static const char *default_port = "12345";
+
+static inline GQuark
+rsound_output_quark(void)
+{
+   return g_quark_from_static_string("rsound_output");
+}
+
+static void
+rsound_configure(rsound_t *rd, const struct config_param *param)
+{
+   rsd_set_param(rd, RSD_HOST, config_dup_block_string(param, "host", default_host));
+   rsd_set_param(rd, RSD_PORT, config_dup_block_string(param, "port", default_port));
+}
+
+static void *
+rsound_init(G_GNUC_UNUSED const struct audio_format *audio_format,
+     const struct config_param *param,
+     G_GNUC_UNUSED GError **error)
+{
+   rsound_t *rd;
+   if ( rsd_init(&rd) < 0 )
+   {
+      g_set_error(error, rsound_output_quark(), 0, "Failed to initialize");
+      return NULL;
+   }
+
+   rsound_configure(rd, param);
+
+   return rd;
+}
+
+static void
+rsound_finish(void *data)
+{
+   rsound_t *rd = data;
+   rsd_free(rd);
+}
+
+static bool
+rsound_open(void *data, struct audio_format *audio_format, GError **error)
+{
+   rsound_t *rd = data;
+   
+   rsd_set_param(rd, RSD_SAMPLERATE, &audio_format->sample_rate);
+   rsd_set_param(rd, RSD_CHANNELS, &audio_format->channels);
+   audio_format->format = SAMPLE_FORMAT_S16;
+   audio_format->reverse_endian = 0;
+
+   int format = RSD_S16_NE;
+   rsd_set_param(rd, RSD_FORMAT, &format);
+
+
+   if ( rsd_start(rd) < 0)
+   {
+      g_set_error(error, rsound_output_quark(), 0, "Failed to connect to server");
+      return false;
+   }
+   return true;
+}
+
+static void
+rsound_cancel(void *data)
+{
+   rsound_t *rd = data;
+   rsd_stop(rd);
+   rsd_start(rd);
+}
+
+static void
+rsound_close(void *data)
+{
+   rsound_t *rd = data;
+
+   rsd_stop(rd);
+}
+
+static size_t
+rsound_play(void *data, const void *chunk, size_t size, GError **error)
+{
+   int rc;
+   rsound_t *rd = data;
+   
+   rc = rsd_write(rd, chunk, size);
+   if ( rc <= 0 )
+   {
+      g_set_error(error, rsound_output_quark(), 0, "Failed to play data");
+      return 0;
+   }
+
+   return rc;
+}
+
+const struct audio_output_plugin rsound_output_plugin = {
+   .name = "rsound",
+   .init = rsound_init,
+   .finish = rsound_finish,
+   .open = rsound_open,
+   .play = rsound_play,
+   .cancel = rsound_cancel,
+   .close = rsound_close,
+};
+
+
diff --git a/src/output_list.c b/src/output_list.c
index 8238f58..4ea1460 100644
--- a/src/output_list.c
+++ b/src/output_list.c
@@ -36,6 +36,7 @@ extern const struct audio_output_plugin mvp_output_plugin;
 extern const struct audio_output_plugin jack_output_plugin;
 extern const struct audio_output_plugin httpd_output_plugin;
 extern const struct audio_output_plugin recorder_output_plugin;
+extern const struct audio_output_plugin rsound_output_plugin;
 extern const struct audio_output_plugin winmm_output_plugin;
 extern const struct audio_output_plugin ffado_output_plugin;
 
@@ -83,6 +84,9 @@ const struct audio_output_plugin *audio_output_plugins[] = {
 #ifdef ENABLE_RECORDER_OUTPUT
 	&recorder_output_plugin,
 #endif
+#ifdef HAVE_RSOUND
+   &rsound_output_plugin,
+#endif
 #ifdef ENABLE_WINMM_OUTPUT
 	&winmm_output_plugin,
 #endif
