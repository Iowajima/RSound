diff --git a/Makefile.am b/Makefile.am
index 90fa348..54331df 100644
--- a/Makefile.am
+++ b/Makefile.am
@@ -762,6 +762,7 @@ OUTPUT_LIBS = \
 	$(LIBWRAP_LDFLAGS) \
 	$(AO_LIBS) \
 	$(ALSA_LIBS) \
+	$(RSOUND_LIBS) \
 	$(ROAR_LIBS) \
 	$(FFADO_LIBS) \
 	$(JACK_LIBS) \
@@ -813,6 +814,11 @@ liboutput_plugins_a_SOURCES += \
 libmixer_plugins_a_SOURCES += src/mixer/roar_mixer_plugin.c
 endif
 
+if HAVE_RSOUND
+liboutput_plugins_a_SOURCES += \
+	src/output/rsound_output_plugin.c src/output/rsound_output_plugin.h
+endif
+
 if ENABLE_FFADO_OUTPUT
 liboutput_plugins_a_SOURCES += \
 	src/output/ffado_output_plugin.c src/output/ffado_output_plugin.h
diff --git a/configure.ac b/configure.ac
index fa2ec19..6c6e4aa 100644
--- a/configure.ac
+++ b/configure.ac
@@ -166,6 +166,11 @@ AC_ARG_ENABLE(ao,
 		[enable support for libao]),,
 	enable_ao=auto)
 
+AC_ARG_ENABLE(rsound,
+	AS_HELP_STRING([--enable-rsound],
+		[enable support for rsound]),,
+	enable_rsound=auto)
+
 AC_ARG_ENABLE(audiofile,
 	AS_HELP_STRING([--enable-audiofile],
 		[enable audiofile support (WAV and others)]),,
@@ -1246,6 +1251,16 @@ fi
 
 AM_CONDITIONAL(HAVE_ROAR, test x$enable_roar = xyes)
 
+dnl ---------------------------------- RSOUND ---------------------------------
+MPD_AUTO_PKG(rsound, RSOUND, [rsound >= 1.0],
+	[RSOUND output plugin], [librsound not found])
+
+if test x$enable_rsound = xyes; then
+	AC_DEFINE(HAVE_RSOUND, 1, [Define to enable RSOUND support])
+fi
+
+AM_CONDITIONAL(HAVE_RSOUND, test x$enable_rsound = xyes)
+
 dnl ----------------------------------- FFADO ---------------------------------
 
 MPD_AUTO_PKG(ffado, FFADO, [libffado],
@@ -1452,6 +1467,7 @@ AM_CONDITIONAL(ENABLE_WINMM_OUTPUT, test x$enable_winmm_output = xyes)
 dnl --------------------- Post Audio Output Plugins Tests ---------------------
 if
 	test x$enable_alsa = xno &&
+	test x$enable_rsound = xno &&
 	test x$enable_roar = xno &&
 	test x$enable_ao = xno &&
 	test x$enable_ffado = xno &&
@@ -1580,6 +1596,7 @@ results(id3,[ID3])
 
 printf '\nPlayback support:\n\t'
 results(alsa,ALSA)
+results(rsound,RSOUND)
 results(ffado,FFADO)
 results(fifo,FIFO)
 results(recorder_output,[File Recorder])
diff --git a/src/output/rsound_output_plugin.c b/src/output/rsound_output_plugin.c
new file mode 100644
index 0000000..6c5a72b
--- /dev/null
+++ b/src/output/rsound_output_plugin.c
@@ -0,0 +1,188 @@
+/*
+ * Copyright (C) 2003-2010 The Music Player Daemon Project
+ * Copyright (C) 2010-2011 Hans-Kristian Arntzen
+ * http://www.musicpd.org
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+ */
+
+#include "config.h"
+#include "rsound_output_plugin.h"
+#include "output_api.h"
+#include "mixer_list.h"
+#include <rsound.h>
+#include <glib.h>
+
+#undef G_LOG_DOMAIN
+#define G_LOG_DOMAIN "rsound"
+
+typedef struct rsd_t
+{
+	struct audio_output base;
+
+	rsound_t *rd;
+	bool canceled;
+} rsd_t;
+
+static inline GQuark
+rsound_output_quark(void)
+{
+	return g_quark_from_static_string("rsound_output");
+}
+
+static void
+rsound_configure(rsound_t *rd, const struct config_param *param)
+{
+	char *host = config_dup_block_string(param, "host", "");
+	char *port = config_dup_block_string(param, "port", "");
+	char *ident = config_dup_block_string(param, "name", "MPD");
+
+	if (host && *host)
+		rsd_set_param(rd, RSD_HOST, host);
+	if (port && *port)
+		rsd_set_param(rd, RSD_PORT, port);
+	if (ident && *ident)
+		rsd_set_param(rd, RSD_IDENTITY, ident);
+
+	g_free(host);
+	g_free(port);
+	g_free(ident);
+}
+
+static struct audio_output *
+rsound_init(const struct config_param *param, GError **error)
+{
+	rsd_t *rsd = g_new(rsd_t, 1);
+
+	if (!ao_base_init(&rsd->base, &rsound_output_plugin, param, error)) {
+		g_free(rsd);
+		return NULL;
+	}
+
+	rsound_t *rd;
+	if (rsd_init(&rd) < 0)
+	{
+		g_set_error(error, rsound_output_quark(), 0, "Failed to initialize");
+		g_free(rsd);
+		return NULL;
+	}
+
+	rsd->rd = rd;
+	rsound_configure(rd, param);
+	return &rsd->base;
+}
+
+static void
+rsound_finish(void *data)
+{
+	rsd_t *rsd = data;
+	rsd_free(rsd->rd);
+	g_free(rsd);
+}
+
+static bool
+rsound_open(struct audio_output *data, struct audio_format *audio_format, GError **error)
+{
+	rsd_t *rsd = data;
+
+	rsd_set_param(rsd->rd, RSD_SAMPLERATE, &audio_format->sample_rate);
+	rsd_set_param(rsd->rd, RSD_CHANNELS, &audio_format->channels);
+
+	int format;
+	switch (audio_format->format)
+	{
+		case SAMPLE_FORMAT_S8:
+			format = RSD_S8;
+			break;
+
+		case SAMPLE_FORMAT_S16:
+			format = RSD_S16_NE;
+			break;
+
+		case SAMPLE_FORMAT_S24_P32:
+			audio_format->format = SAMPLE_FORMAT_S32;
+		case SAMPLE_FORMAT_S32:
+			format = RSD_S32_NE;
+			break;
+
+		default:
+			format = RSD_S16_NE;
+			audio_format->format = SAMPLE_FORMAT_S16;
+	}
+
+// reverse_endian not found in audio_format anymore
+//	audio_format->reverse_endian = 0;
+	rsd_set_param(rsd->rd, RSD_FORMAT, &format);
+
+	if (rsd_start(rsd->rd) < 0)
+	{
+		g_set_error(error, rsound_output_quark(), 0, 
+				"Failed to connect to server");
+		return false;
+	}
+	return true;
+}
+
+static void
+rsound_cancel(struct audio_output *data)
+{
+	rsd_t *rsd = data;
+	rsd_stop(rsd->rd);
+	rsd->canceled = true;
+}
+
+static void
+rsound_close(struct audio_output *data)
+{
+	rsd_t *rsd = data;
+	rsd_stop(rsd->rd);
+}
+
+static size_t
+rsound_play(struct audio_output *data, const void *chunk, size_t size, GError **error)
+{
+	rsd_t *rsd = data;
+
+	if (rsd->canceled)
+	{
+		if (rsd_start(rsd->rd) < 0)
+		{
+			g_set_error(error, rsound_output_quark(), 0, 
+					"Failed to recover after cancel");
+			return false;
+		}
+		rsd->canceled = false;
+	}
+
+	size_t rc;
+	rc = rsd_write(rsd->rd, chunk, size);
+	if (rc == 0)
+	{
+		g_set_error(error, rsound_output_quark(), 0, "Failed to play data");
+		return 0;
+	}
+
+	return rc;
+}
+
+const struct audio_output_plugin rsound_output_plugin = {
+	.name = "rsound",
+	.init = rsound_init,
+	.finish = rsound_finish,
+	.open = rsound_open,
+	.play = rsound_play,
+	.cancel = rsound_cancel,
+	.close = rsound_close,
+};
diff --git a/src/output/rsound_output_plugin.h b/src/output/rsound_output_plugin.h
new file mode 100644
index 0000000..63573e9
--- /dev/null
+++ b/src/output/rsound_output_plugin.h
@@ -0,0 +1,25 @@
+/*
+ * Copyright (C) 2003-2011 The Music Player Daemon Project
+ * http://www.musicpd.org
+ * 
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+ */
+
+#ifndef MPD_RSOUND_OUTPUT_PLUGIN_H
+#define MPD_RSOUND_OUTPUT_PLUGIN_H
+
+extern const struct audio_output_plugin rsound_output_plugin;
+
+#endif
diff --git a/src/output_list.c b/src/output_list.c
index 835c02b..baf75bb 100644
--- a/src/output_list.c
+++ b/src/output_list.c
@@ -21,6 +21,7 @@
 #include "output_list.h"
 #include "output_api.h"
 #include "output/alsa_output_plugin.h"
+#include "output/rsound_output_plugin.h"
 #include "output/ao_output_plugin.h"
 #include "output/ffado_output_plugin.h"
 #include "output/fifo_output_plugin.h"
@@ -53,6 +54,9 @@ const struct audio_output_plugin *const audio_output_plugins[] = {
 #ifdef HAVE_ALSA
 	&alsa_output_plugin,
 #endif
+#ifdef HAVE_RSOUND
+	&rsound_output_plugin,
+#endif
 #ifdef HAVE_ROAR
 	&roar_output_plugin,
 #endif
