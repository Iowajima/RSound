diff --git a/Makefile.am b/Makefile.am
index ddb27a6..8081a6a 100644
--- a/Makefile.am
+++ b/Makefile.am
@@ -48,6 +48,7 @@ mpd_headers = \
 	src/output_state.h \
 	src/output_print.h \
 	src/output_command.h \
+   src/output/rsound.h \
 	src/filter_internal.h \
 	src/filter_config.h \
 	src/filter_plugin.h \
@@ -633,7 +634,8 @@ OUTPUT_API_SRC = \
 	src/output_init.c
 
 OUTPUT_SRC = \
-	src/output/null_plugin.c
+	src/output/null_plugin.c \
+   src/output/rsound_plugin.c
 
 MIXER_API_SRC = \
 	src/mixer_control.c \
diff --git a/configure.ac b/configure.ac
index 0c2d694..ee75c29 100644
--- a/configure.ac
+++ b/configure.ac
@@ -43,7 +43,7 @@ AC_SUBST(AM_CFLAGS,"")
 
 AC_SUBST(MPD_LIBS)
 AC_SUBST(MPD_CFLAGS)
-MPD_LIBS=""
+MPD_LIBS="-lrsound"
 MPD_CFLAGS=""
 
 
diff --git a/src/output/rsound_plugin.c b/src/output/rsound_plugin.c
new file mode 100644
index 0000000..7cd6473
--- /dev/null
+++ b/src/output/rsound_plugin.c
@@ -0,0 +1,152 @@
+/*
+ * Copyright (C) 2003-2010 The Music Player Daemon Project
+ * http://www.musicpd.org
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+ */
+
+#include "config.h"
+#include "output_api.h"
+#include "mixer_list.h"
+#include <rsound.h>
+
+#include <glib.h>
+#include <sys/types.h>
+#include <sys/socket.h>
+#include <arpa/inet.h>
+#include <netdb.h>
+#include <stdint.h>
+#include <fcntl.h>
+#include <unistd.h>
+#include <stdlib.h>
+#include <string.h>
+#include <stdint.h>
+
+
+#undef G_LOG_DOMAIN
+#define G_LOG_DOMAIN "rsound"
+
+
+static const char *default_host = "localhost";
+static const char *default_port = "12345";
+
+static inline GQuark
+rsound_output_quark(void)
+{
+   return g_quark_from_static_string("rsound_output");
+}
+
+static void
+rsound_configure(rsound_t *rd, const struct config_param *param)
+{
+   rsd_set_param(rd, RSD_HOST, config_dup_block_string(param, "host", default_host));
+   rsd_set_param(rd, RSD_PORT, config_dup_block_string(param, "port", default_port));
+}
+
+static void *
+rsound_init(G_GNUC_UNUSED const struct audio_format *audio_format,
+     const struct config_param *param,
+     G_GNUC_UNUSED GError **error)
+{
+   rsound_t *rd;
+   if ( rsd_init(&rd) < 0 )
+   {
+      g_set_error(error, rsound_output_quark(), 0, "Failed to initialize");
+      return NULL;
+   }
+
+   rsound_configure(rd, param);
+
+   return rd;
+}
+
+static void
+rsound_finish(void *data)
+{
+   rsound_t *rd = data;
+   rsd_free(rd);
+}
+
+static bool
+rsound_open(void *data, struct audio_format *audio_format, GError **error)
+{
+   uint16_t temp16;
+
+   rsound_t *rd = data;
+   
+   rsd_set_param(rd, RSD_SAMPLERATE, &audio_format->sample_rate);
+   rsd_set_param(rd, RSD_CHANNELS, &audio_format->channels);
+   audio_format->format = SAMPLE_FORMAT_S16;
+   
+/* Hacky hack :') */
+   temp16 = 1;
+   if ( *((uint8_t*)&temp16) )
+      audio_format->reverse_endian = 0;
+   else
+      audio_format->reverse_endian = 1;
+/* End hacky hack */
+
+
+   if ( rsd_start(rd) < 0)
+   {
+      g_set_error(error, rsound_output_quark(), 0, "Failed to connect to server");
+      return false;
+   }
+   return true;
+}
+
+static void
+rsound_cancel(void *data)
+{
+   rsound_t *rd = data;
+   rsd_stop(rd);
+   rsd_start(rd);
+}
+
+static void
+rsound_close(void *data)
+{
+   rsound_t *rd = data;
+
+   rsd_stop(rd);
+}
+
+static size_t
+rsound_play(void *data, const void *chunk, size_t size, GError **error)
+{
+   int rc;
+   rsound_t *rd = data;
+   
+   rc = rsd_write(rd, chunk, size);
+   if ( rc <= 0 )
+   {
+      g_set_error(error, rsound_output_quark(), 0, "Failed to play data");
+      return 0;
+   }
+
+   return rc;
+}
+
+const struct audio_output_plugin rsound_output_plugin = {
+   .name = "rsound",
+   .init = rsound_init,
+   .finish = rsound_finish,
+   .open = rsound_open,
+   .play = rsound_play,
+   .cancel = rsound_cancel,
+   .close = rsound_close,
+};
+
+
diff --git a/src/output_list.c b/src/output_list.c
index d94749e..b98ea6f 100644
--- a/src/output_list.c
+++ b/src/output_list.c
@@ -36,6 +36,7 @@ extern const struct audio_output_plugin mvp_output_plugin;
 extern const struct audio_output_plugin jack_output_plugin;
 extern const struct audio_output_plugin httpd_output_plugin;
 extern const struct audio_output_plugin recorder_output_plugin;
+extern const struct audio_output_plugin rsound_output_plugin;
 
 const struct audio_output_plugin *audio_output_plugins[] = {
 #ifdef HAVE_SHOUT
@@ -81,6 +82,7 @@ const struct audio_output_plugin *audio_output_plugins[] = {
 #ifdef ENABLE_RECORDER_OUTPUT
 	&recorder_output_plugin,
 #endif
+   &rsound_output_plugin,
 	NULL
 };
 
